BRAND_NAME = Gogs
RUN_USER   = git
RUN_MODE   = prod

; # !!! NEVER EVER MODIFY THIS FILE !!!
; # !!! PLEASE MAKE CHANGES ON CORRESPONDING CUSTOM CONFIG FILE !!!
; # !!! IF YOU ARE PACKAGING PROVIDER, PLEASE MAKE OWN COPY OF IT !!!
; ; The brand name of the application, can be your company or team name.
; BRAND_NAME = Gogs
; ; The system user who should be running the applications. It has no effect on Windows,
; ; otherwise, it should match the value of $USER environment variable.
; RUN_USER = git
; ; The running mode of the application, can be either "dev", "prod" or "test".
; RUN_MODE = dev
; [server]
; ; The public-facing URL for the application.
; EXTERNAL_URL = %(PROTOCOL)s://%(DOMAIN)s:%(HTTP_PORT)s/
; ; The public-facing domain name for the application.
; DOMAIN = localhost
; ; The protocol that is used to serve direct traffic to the application.
; ; Currently supports "http", "https", "fcgi" and "unix".
; PROTOCOL = http
; ; The address to be listened by the application.
; HTTP_ADDR = 0.0.0.0
; ; The port number to be listened by the application.
; HTTP_PORT = 3000
; ; Generate steps:
; ; $ ./gogs cert -ca=true -duration=8760h0m0s -host=myhost.example.com
; ;
; ; Or from a .pfx file exported from the Windows certificate store (do
; ; not forget to export the private key):
; ; $ openssl pkcs12 -in cert.pfx -out cert.pem -nokeys
; ; $ openssl pkcs12 -in cert.pfx -out key.pem -nocerts -nodes
; CERT_FILE = custom/https/cert.pem
; KEY_FILE = custom/https/key.pem
; ; The minimum allowed TLS version, currently supports "TLS10", "TLS11", "TLS12", and "TLS13".
; TLS_MIN_VERSION = TLS12
; ; File permission when serve traffic via Unix domain socket.
; UNIX_SOCKET_PERMISSION = 666
; ; Local (DMZ) URL for workers (e.g. SSH update) accessing web service.
; ; In most cases you do not need to change the default value.
; ; Alter it only if your SSH server node is not the same as HTTP node.
; LOCAL_ROOT_URL = %(PROTOCOL)s://%(HTTP_ADDR)s:%(HTTP_PORT)s/
; ; Whether to disable using CDN for static files regardless.
; OFFLINE_MODE = false
; ; Whether to disable logging in router.
; DISABLE_ROUTER_LOG = true
; ; Whether to enable application level GZIP compression.
; ENABLE_GZIP = false
; ; The path for storing application specific data.
; APP_DATA_PATH = data
; ; Whether to enable to load assets (i.e. "conf", "templates", "public") from disk instead of embedded bindata.
; LOAD_ASSETS_FROM_DISK = false
; ; The landing page URL for anonymous users, the value should not include
; ; subpath that is handled by the reverse proxy.
; LANDING_URL = /
; ; Whether to disable SSH access to the application entirely.
; DISABLE_SSH = false
; ; The domain name to be exposed in SSH clone URL.
; SSH_DOMAIN = %(DOMAIN)s
; ; The port number to be exposed in SSH clone URL.
; SSH_PORT = 22
; ; The path of SSH root directory, default is "$HOME/.ssh".
; SSH_ROOT_PATH =
; ; The path to ssh-keygen, default is "ssh-keygen" and let shell find out which one to call.
; SSH_KEYGEN_PATH = ssh-keygen
; ; The directory to create temporary files when test a public key using ssh-keygen,
; ; default is the system temporary directory.
; SSH_KEY_TEST_PATH =
; ; Whether to check minimum public key size with corresponding type.
; MINIMUM_KEY_SIZE_CHECK = false
; ; Whether to rewrite "~/.ssh/authorized_keys" file at start, ignored when use builtin SSH server.
; REWRITE_AUTHORIZED_KEYS_AT_START = false
; ; Whether to start a builtin SSH server.
; START_SSH_SERVER = false
; ; The network interface for builtin SSH server to listen on.
; SSH_LISTEN_HOST = 0.0.0.0
; ; The port number for builtin SSH server to listen on.
; SSH_LISTEN_PORT = %(SSH_PORT)s
; ; The list of accepted ciphers for connections to builtin SSH server.
; SSH_SERVER_CIPHERS = aes128-ctr, aes192-ctr, aes256-ctr, aes128-gcm@openssh.com, arcfour256, arcfour128
; ; The list of accepted MACs for connections to builtin SSH server.
; SSH_SERVER_MACS = hmac-sha2-256-etm@openssh.com, hmac-sha2-256, hmac-sha1
; ; Define allowed algorithms and their minimum key length (use -1 to disable a type).
; [ssh.minimum_key_sizes]
; ED25519 = 256
; ECDSA   = 256
; RSA     = 2048
; DSA     = 1024
; [repository]
; ; The root path for storing managed repositories, default is "~/gogs-repositories"
; ROOT =
; ; The script type server supports, sometimes could be "sh".
; SCRIPT_TYPE = bash
; ; Default ANSI charset for an unrecognized charset.
; ANSI_CHARSET =
; ; Whether to force every new repository to be private.
; FORCE_PRIVATE = false
; ; The global limit of number of repositories a user can create, -1 means no limit.
; MAX_CREATION_LIMIT = -1
; ; Preferred Licenses to place at the top of the list.
; ; Name must match file name in "conf/license" or "custom/conf/license".
; PREFERRED_LICENSES = Apache License 2.0, MIT License
; ; Whether to disable Git interaction with repositories via HTTP/HTTPS protocol.
; DISABLE_HTTP_GIT = false
; ; Whether to enable ability to migrate repository by server local path.
; ENABLE_LOCAL_PATH_MIGRATION = false
; ; Whether to enable render mode for raw file. There are potential security risks.
; ENABLE_RAW_FILE_RENDER_MODE = false
; ; The maximum number of goroutines that can be run at the same time for a single
; ; fetch request. Usually, the value depend of how many CPU (cores) you have. If
; ; the value is non-positive, it matches the number of CPUs available to the application.
; COMMITS_FETCH_CONCURRENCY = 0
; [repository.editor]
; ; List of file extensions that should have line wraps in the CodeMirror editor.
; ; Separate extensions with a comma.
; LINE_WRAP_EXTENSIONS = .txt,.md,.markdown,.mdown,.mkd
; ; Valid file modes that have a preview API associated with them, such as "/api/v1/markdown".
; ; Separate values by commas. Preview tab in edit mode won't show if the file extension doesn't match.
; PREVIEWABLE_FILE_MODES = markdown
; [repository.upload]
; ; Whether to enable repository file uploads.
; ENABLED = true
; ; The path to temporarily store uploads (content under this path gets wiped out on every start).
; TEMP_PATH = data/tmp/uploads
; ; File types that are allowed to be uploaded, e.g. "image/jpeg|image/png". Leave empty to allow any file type.
; ALLOWED_TYPES =
; ; The maximum size of each file in MB.
; FILE_MAX_SIZE = 3
; ; The maximum number of files per upload.
; MAX_FILES = 5
[database]
; The database backend, either "postgres", "mysql" "sqlite3" or "mssql".
; You can connect to TiDB with MySQL protocol.
TYPE     = postgres
HOST     = gogsdb:5432
NAME     = gogs
USER     = gogs
PASSWORD = gogs
SCHEMA   = public
SSL_MODE = disable
PATH     = /app/gogs/data/gogs.db

[repository]
ROOT = /data/git/gogs-repositories

[server]
DOMAIN           = localhost
HTTP_PORT        = 3000
EXTERNAL_URL     = http://localhost:3000/
DISABLE_SSH      = false
SSH_PORT         = 22
START_SSH_SERVER = false
OFFLINE_MODE     = false

[mailer]
ENABLED = false

[auth]
REQUIRE_EMAIL_CONFIRMATION  = false
DISABLE_REGISTRATION        = false
ENABLE_REGISTRATION_CAPTCHA = false
REQUIRE_SIGNIN_VIEW         = false

[user]
ENABLE_EMAIL_NOTIFICATION = false

[picture]
DISABLE_GRAVATAR        = false
ENABLE_FEDERATED_AVATAR = false

[session]
PROVIDER = file

[log]
MODE      = file
LEVEL     = Info
ROOT_PATH = /app/gogs/log

[security]
INSTALL_LOCK = true
SECRET_KEY   = O2uz6sYm1CgTnPK
